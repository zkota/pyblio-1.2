<refentry id="class-selection">
  <refnamediv>
    <refname>Selection.Selection</refname>
    <refpurpose>Defines restrictions on an iterator</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <programlisting>
class <classname>Selection.Selection</classname>:
    <link linkend="mem-selection-search"><varname>self.search</varname></link>
    <link linkend="mem-selection-sort"><varname>self.sort</varname></link>

    def <link linkend="meth-selection-init">__init__</link> (self, search = None, sort = None):
    def <link linkend="meth-selection-iterator">iterator</link> (self, iterator):
</programlisting>
  </refsynopsisdiv>

  <refsect1>
    <title>Usage</title>
    <para>This class can hold Search and Sort criterions and provide
    an iterator that follows these restrictions.</para>

  </refsect1>

  <refsect1>
    <title>Members</title>

    <refsect2 id="mem-selection-search">
      <title>self.search</title>
      <para>The current <link linkend="class-tester">Tester</link>
      object.</para>
      <warning>
	<para>Changing this attribute won't change the behaviour of
	iterators that were previously returned by <link
	linkend="meth-selection-iterator">iterator</link>.</para>
      </warning>
    </refsect2>

    <refsect2 id="mem-selection-sort">
      <title>self.sort</title>
      <para>The current <link linkend="class-sort">Sort</link> object.</para>
      <warning>
	<para>Changing this attribute won't change the behaviour of
	iterators that were previously returned by <link
	linkend="meth-selection-iterator">iterator</link>.</para>
      </warning>
    </refsect2>
    
  </refsect1>

  <refsect1>
    <title>Methods</title>
    
    <refsect2 id="meth-selection-init">
      <title>__init__ (self, search, sort)</title>
      <programlisting>
selection = Selection (search = some_search, sort = some_sorting)
</programlisting>
      <para>Creates a new Selection filter.</para>
    </refsect2>

    <refsect2 id="meth-selection-iterator">
      <title>iterator (self, iterator)</title> 

      <para>Returns a new iterator that will loop over the elements of
      the iterator  passed as argument,  but according to  the current
      filtering.</para>
    </refsect2>

  </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:nil
sgml-parent-document:("pyblio.sgml" "reference" "refentry")
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
